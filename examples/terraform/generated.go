// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package main

import (
	"context"
	"encoding/json"

	"github.com/dagger/cloak/sdk/go/dagger"
)

func (r *query) terraform(ctx context.Context) (*Terraform, error) {

	return new(Terraform), nil

}

type query struct{}
type terraform struct{}

func main() {
	dagger.Serve(context.Background(), map[string]func(context.Context, dagger.ArgsInput) (interface{}, error){
		"Query.terraform": func(ctx context.Context, fc dagger.ArgsInput) (interface{}, error) {
			var bytes []byte
			_ = bytes
			var err error
			_ = err

			return (&query{}).terraform(ctx)
		},
		"Terraform.apply": func(ctx context.Context, fc dagger.ArgsInput) (interface{}, error) {
			var bytes []byte
			_ = bytes
			var err error
			_ = err

			var config dagger.FSID

			bytes, err = json.Marshal(fc.Args["config"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &config); err != nil {
				return nil, err
			}

			var token dagger.SecretID

			bytes, err = json.Marshal(fc.Args["token"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &token); err != nil {
				return nil, err
			}

			return (&terraform{}).apply(ctx,

				config,

				token,
			)
		},
		"Terraform.plan": func(ctx context.Context, fc dagger.ArgsInput) (interface{}, error) {
			var bytes []byte
			_ = bytes
			var err error
			_ = err

			var config dagger.FSID

			bytes, err = json.Marshal(fc.Args["config"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &config); err != nil {
				return nil, err
			}

			var token dagger.SecretID

			bytes, err = json.Marshal(fc.Args["token"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &token); err != nil {
				return nil, err
			}

			return (&terraform{}).plan(ctx,

				config,

				token,
			)
		},
		"Terraform.fmt": func(ctx context.Context, fc dagger.ArgsInput) (interface{}, error) {
			var bytes []byte
			_ = bytes
			var err error
			_ = err

			var config dagger.FSID

			bytes, err = json.Marshal(fc.Args["config"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &config); err != nil {
				return nil, err
			}

			var token dagger.SecretID

			bytes, err = json.Marshal(fc.Args["token"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &token); err != nil {
				return nil, err
			}

			return (&terraform{}).fmt(ctx,

				config,

				token,
			)
		},
		"Terraform.destroy": func(ctx context.Context, fc dagger.ArgsInput) (interface{}, error) {
			var bytes []byte
			_ = bytes
			var err error
			_ = err

			var config dagger.FSID

			bytes, err = json.Marshal(fc.Args["config"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &config); err != nil {
				return nil, err
			}

			var token dagger.SecretID

			bytes, err = json.Marshal(fc.Args["token"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &token); err != nil {
				return nil, err
			}

			return (&terraform{}).destroy(ctx,

				config,

				token,
			)
		},
	})
}
