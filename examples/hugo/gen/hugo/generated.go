// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package hugo

import (
	"context"

	"github.com/Khan/genqlient/graphql"
	"github.com/dagger/cloak/sdk/go/dagger"
)

// GenerateHugo includes the requested fields of the GraphQL type hugo.
type GenerateHugo struct {
	Generate dagger.Filesystem `json:"generate"`
}

// GetGenerate returns GenerateHugo.Generate, and is useful for accessing the field via an interface.
func (v *GenerateHugo) GetGenerate() dagger.Filesystem { return v.Generate }

// GenerateResponse is returned by Generate on success.
type GenerateResponse struct {
	Hugo GenerateHugo `json:"hugo"`
}

// GetHugo returns GenerateResponse.Hugo, and is useful for accessing the field via an interface.
func (v *GenerateResponse) GetHugo() GenerateHugo { return v.Hugo }

// __GenerateInput is used internally by genqlient
type __GenerateInput struct {
	Src dagger.FSID `json:"src"`
}

// GetSrc returns __GenerateInput.Src, and is useful for accessing the field via an interface.
func (v *__GenerateInput) GetSrc() dagger.FSID { return v.Src }

func Generate(
	ctx context.Context,
	src dagger.FSID,
) (*GenerateResponse, error) {
	req := &graphql.Request{
		OpName: "Generate",
		Query: `
query Generate ($src: FSID!) {
	hugo {
		generate(src: $src) {
			id
		}
	}
}
`,
		Variables: &__GenerateInput{
			Src: src,
		},
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data GenerateResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
